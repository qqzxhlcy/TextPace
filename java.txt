dir--->当前目录下的子目录
cd命令      【改变路径】
cd 目录的路径
路径分为绝对路径与相对路径
绝对路径：表示该路径从磁盘的根目录下出发
相对路径：表示该路径从当前所在路径下出发
cd.. -->回到上级目录
cd. _-->当前路径
cd\ -->回到根目录
切换盘符：
c:回车
d:回车
e:回车
jdk：编译环境
jre：运行环境
jvm：java虚拟机
jdk中包含jre，jre中包含jvm
jdk中的bin文件。
该文件下存放了许多的命令。例如javac.exe ，java.exe
javac.exe负责编译
java.exe负责运行

public static void main(string[] argr)
{
    System.out.println("XXXXX");
}

标识符的命名规范：
1、类名、接口名：首字母大写，后面每个单词首字母大写
2、变量名、方法名：首字母小写，后面每个单词首字母大写
3、常量名：全部大写
标识符命名规则：
1、只能由“数字、字母、下划线、美元符号”组成，不能含有其他符号
2、不能由数字开头
3、严格区分大小写
4、关键字不能做标识符

声明/定义变量的语法格式
数据类型 变量名；

通常访问一个变量名包括两种访问形式
   第一种：读取变量中保存的数据   get/获取
   第二种：修改变量中保存的数据   set/设置
   
  byte          占用大小1       默认值 0       取值范围 -128~127
 short          占用大小2       默认值 0       取值范围 -32768~32767
    int           占用大小4       默认值 0       取值范围 -2147483648~2147483647
   long         占用大小8       默认值 0L       取值范围 

关系运算符的运算结果一定是布尔型。true/false

逻辑运算符
  &      逻辑与            （两边都是true ，结果才是ture）
   |       逻辑或            （两边只要有一个是true，结果就是true）
   ！     逻辑非            （取反，！false就是true，！true就是false，这是一个单目运算符）
   ^      逻辑异或         （两边的算子只要不一样就是true）
   &&    短路与
    ||        短路非

生命周期中。面向对象
ooa。面向对象分析
ood。面向对象设计
oop。面向对象编程


接口：
1、接口是一种“引用数据类型”，编译之后也是一个class字节码文件
2、接口是完全抽象的。（或者说接口是特殊的抽象类）
3、接口的定义：
     【修饰符列表】 + interface 接口名 {  }
4、接口支持多继承，一个接口可以继承多个接口
   interface A{
     }
   interface B{
     }
   interface C extends A，B{
     }
5、接口只有两部分内容。
1)、抽象方法
2)、常量
6、接口中所有东西都是公开的，且其中的public abstract可以省略

intface MyMath {
    int sum(int a,int b)     
}
7、接口都是抽象方法，所以不能有方法体
8、接口中的pulic static final可以省略
9、使用类“实现（继承）”接口是时使用 "implements"
10、继承在前，接口在后

继承extends。接口是。interface ,接口的继承是implements
向下转型时最好写一个判断，判断是否能被承认转型（关键字：instanceof）
if （s instanceof m）{
......
}

Object 中toString（）
public String toString(){
      return this.getClass().getName()+"@"+Integer.toHexString(hashCode());
}

Object 中equals方法  （判断两个对象是否相等）



        //String（数组名，a数，b数） 从数组中第a个数往后输出b个数
        char[] c = {'a','b','n','f','s'};
        String s = new String(c);
        String c1 = new String(c,2,3);
        System.out.println(c1);

        //String类中的charAt方法  charAt（int index）
        char a ="中国nb".charAt(1);
        System.out.println(a);

        //compareTo方法，根据数字字典进行比较
        //0两个相等。1前大后小，-1.前小后大
        int ab = "abg".compareTo("abc");
        System.out.println(ab);

        //contains 判断前面的字符串是否包含后面的字符串
        System.out.println("HelloWorld".contains("Hello"));

        //endwith  判断前字符串是否以后字符串结尾
        System.out.println("www.qqz.lcy".endsWith("lcy"));
        System.out.println("abcc".equals("abcc"));

        //equalsIgnoerCase,比较两字符串，无视大小写
        System.out.println("ASCvv".equalsIgnoreCase("ascvV"));

        //getBytes  将字符串转换为字节数组
        byte[] bytes= "sdasdadasd".getBytes(StandardCharsets.UTF_8);
        for (int i=0;i<bytes.length;i++){
            System.out.println(bytes[i]);
        }
        //indexOf   判断子字符串第一次出现的索引（下标）
        System.out.println("welcometoChina".indexOf("China"));   //9

        //isEmply()   判断字符串是否为空
        //lastindexOf 判断子字符串最后出现的索引（下标）
        System.out.println("welcome to China is very beautiful l love China".lastIndexOf("China"));   //42

        //replace替换
        String newString = "http://www.qqz.com".replace("http://","Https://");
        System.out.println(newString);

        //split 拆分字符串
        String[] ss= "2019-08-03".split("-");
        for (int i=0;i<ss.length;i++){
            System.out.println(ss[i]);
        }
        //bolean startsWith 判断某字符串是否以某子字符串开头
        System.out.println("www.qqz.lcy".startsWith("lcy"));//false
        System.out.println("abcc".equals("abcc"));    //true

        //subsstring(int a)   截取字符串  subsstring(int a,int b) a为开始，b为结束
        System.out.println("http://www.qqz.com".substring(7));   //www.qqz.com
        System.out.println("http://www.qqz.com".substring(7,10));   //www

        //toCharArray  将字符转换为数组
        char[] ar = "我叫钱庆中".toCharArray();
        for (int i = 0;i<ar.length;i++){
            System.out.println(ar[i]);
        }

        //toLowerCase 转换为小写   toUpperCase  转换为大写
        System.out.println("ASDDSADADSdsada".toLowerCase());
        System.out.println("ASDDSADADSdsada".toUpperCase());

        //去除空白 trim()
        System.out.println("       Hello   World         ".trim());   //Hello World

        //valueOf    唯一一个静态方法。作用是转换为String类型
            String s2= String.valueOf(123123);
            System.out.println(s2);    //123123(原本类型为int型，现在是String)





        //StringBuffer 和StringBuilder都是用来连接字符串的
        //但是StringBuffer修饰关键字的时候有 synchronized，在多线程中是安全的
        StringBuffer stringb= new StringBuffer();
        stringb.append("AAAAAA");
        for(int i = 0; i < 5 ;i++){    //AAAAAA01234
            stringb.append(i);
            System.out.println(stringb);
        }

        StringBuilder sb = new StringBuilder();
        sb.append("ABC");
        for (int i= 0;i<5;i++){     //ABC01234
            sb.append(i);
            System.out.println(sb);
        }
    }

        //静态方法parseInt(String s)
        int result = Integer.parseInt("123");
        System.out.println(result + 100);    //223 



        //Date是一个显示时间的类
        Date nowTime = new Date();
        System.out.println(nowTime);   //时间是外国格式

        //y年，M月，d日。H小时。m分。s秒
        //SimpleDateFormat是一个格式化时间的类
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String nowTimes = sdf.format(nowTime);
        System.out.println(nowTimes);

        //String 转Date
        String nowTimea = "2019-08-03 13:14:520";
        SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:sss");
        Date detaTime = sdf2.parse(nowTimea);
        System.out.println(detaTime);    //Sat Aug 03 13:22:40 CST 2019





      //求时间print运行完for循环需要的时间
       //System.currentTimeMillis()获取自1970年1月1日到现在的系统当前时间毫秒总和
        //使用currentTimeMillis(); 输出的毫秒
        print p = new print();
        long begin = System.currentTimeMillis();
        p.print();
        print();
        long end = System.currentTimeMillis();
        System.out.println("耗费时长：" +(end - begin)+"毫秒");



//Random 生成随机数
        //创建一个随机数对象
        Random r1 = new Random();
        //创建一个Integer数据类型范围内的数
        Integer num1 = r1.nextInt();
        System.out.println(num1);

        //随机数大小为0—99
        Integer num2  = r1.nextInt(100);

collections.synchronizedList  线程安全


IO流主要得4个方法：
Input
Output

Reader
Writrer

使用完流之后记得关闭流
所有的输出流都是可刷新的。都有flush（）方法   （继承Flushable接口）
flush方法的作用是强行清空管道。输出管道中剩余的数据
所以输出流在结束时一定要刷新一下。（习惯）
如果没使用flush方法刷新可能会丢失数据

文件专属：
    java.io.FileInputStream
    java.io.FileOutputStream
    java.io.FileReader
    java.io.FileWriter

转换流（将字节流转换为字符流）：
    java.io.InputStreamReader
    java.io.OutputStreamReader

缓冲流专属：
    java.io.BuffereReader
    java.io.BuffereWriter
    java.io.BuffereInputStream
    java.io.BuffereOutputStream

数据流专属：
    java.io.DataInputStream 
    java.io.DataOutputStream

标准输出流：
    java.io.ObjectInputStream
    java.io.ObjectOutputStream

对象专属流：
    java.io.PrintWriter
    java.io.PrintStream


file 是文件路径或者文件具体位置的抽象表现。比如：C:\迅雷下载
file类中 xx.exists此方法是用于检测file是否存在
midir  以目录的形式创建（单数）
midirs  以目录的形式创建（复数）
createNewFile 以文件的形式创建


标准输出流：
    java.io.ObjectInputStream
    java.io.ObjectOutputStream
这两个过程的名称叫序列化和反序列化
     序列化就是将电脑内存中的数据一份一份，一块一块的切割然后送到硬盘文件中保存
 这个过程就叫做序列化（ObjctOutputStream）
      反序列化就是将硬盘文件中的一块块的数据重新组装在内存中（ObjectInputStram）
参与序列化和反序列化的时候，必须实现Serializable接口

Serializable接口是一个标志接口，它里面没有任何东西，它只是为了提示java虚拟机。可能
会对这个类进行特殊处理
transient修饰的不参与序列化


获取类中的Field
Class c1 = Class.forName("Work7.Student");
        //getFields()方法只能拿公共的Field
        Field[] fields = c1.getFields();
        System.out.println(fields.length);
        Field f = fields[0];
        System.out.println(f.getName());

        System.out.println("==================================================");
        //getDeclaredFields()方法能拿到所有Field
        Field[] fs = c1.getDeclaredFields();
        System.out.println(fs.length);
        for (int i=0;i<fs.length;i++){
            Field fsn = fs[i];
            System.out.println(fsn.getName());
        }
        System.out.println("!!!!!!!!!!!!!!!!!");
        for (Field field:fs){
            System.out.println(field.getName());
        }



如何让获取Field数据类型名：
//创建一个Class类型。getType()方法是利用反射获取Field数据类型的
            Class fieldTyoe = field.getType();
            //getSimpleName（）获取简略名称。getName()获取完整名称
            System.out.println(fieldTyoe.getSimpleName());
            System.out.println(field.getName());


如何获取Field的修饰符：
//获取File前面修饰符
            int i = field.getModifiers();//获得修饰符数量
            //调用Modifier类中的toString方法能直接将数字转换为修饰符名字
            System.out.println(Modifier.toString(i));


File反编译（对java.lang包下的String的Field进行反编译）：
public static void main(String[] args) throws ClassNotFoundException {
        StringBuilder s = new StringBuilder();
        Class c = Class.forName("java.lang.String");
        //Modifier.toString(c.getModifiers())
        //c.getModifiers()获取修饰符名字返回一个int类型
        //想要将int类转换为String类，则调用Modifier中的tostring方法，最终得到String表达的修饰符
        //c.getSimpleName() 获得类的简写名字
        //如果使用 c.getName()  将会得到类的完整名字classjava.lang.String
        s.append(Modifier.toString(c.getModifiers()) + "class" + c.getSimpleName()+"\n");
        Field[] f = c.getDeclaredFields();
        for(Field field:f){
            //制表符
            s.append("\t");
            s.append(Modifier.toString(field.getModifiers()));
            s.append(" ");
            //getType()获得数据类型的名比如：int，double之类
            s.append(field.getType().getSimpleName());
            s.append(" ");
            s.append(field.getName());
            s.append(";\n");
        }
        System.out.println(s);
    }


通过反射机制访问对象属性并修改：
 public static void main(String[] args) throws Exception{
        //通过反射机制创建对象。
        //创建Class
        Class c =Class.forName("Work7.Student");
        //使用newInstance()方法创建无参构造方法
        Object o = c.newInstance();
        //使用getDeclaredField（）方法获取一个叫name的属性
        Field f = c.getDeclaredField("name");
        //通过set方法对name赋值：小明
        f.set(o,"小明");
        //通过get（）方法输出
        f.get(o);
        System.out.println(f.get(o));
    }



如果想利用反射机制去访问类中的私有属性，那么就需要利用反射的机制去打破封装
public static void main(String[] args) throws Exception{
        //通过反射机制创建对象。
        //创建Class
        Class c =Class.forName("Work7.Student");
        //使用newInstance()方法创建无参构造方法
        Object o = c.newInstance();
        //使用getDeclaredField（）方法获取一个叫name的属性
        Field f = c.getDeclaredField("name");
        


        //打破封装
        f.setAccessible(true);



        //通过set方法对name赋值：小明
        f.set(o,"小明");
        //通过get（）方法输出
        f.get(o);
        System.out.println(f.get(o));
    }
打破封装可能会导致私有数据的流失或者篡改，以引发损失，所以打封装属于反射机制的缺点



可变长度参数：
类名... 名字    （其中三个.最为重要）（可变长度参数一次只有有一个，并只能放最后）
并且可变长度参数可以看做是一个数组


Mithod：

 public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {
        //使用反射机制创建对象方法
        //创建Class
        Class c= Class.forName("Work7.Student");
        //启动无参构造
        Object o = c.newInstance();
        //创建一个Method对象调用getDeclaredMethod（）方法
        //getDeclaredMethod（）方法的作用是创建类里面的方法并赋值
        Method m = c.getDeclaredMethod("imports",String.class,String.class);
        Method m2 = c.getDeclaredMethod("studentNumber", Integer.class);
        //invoke（）方法是用于调用方法的；
        //四要素：o1是返回值类型。m是方法。o是对象名，"mingzi","lalala"是实参
        Object o1 = m.invoke(o,"mingzi","lalala");
        System.out.println(o1);
    }
//invoke（）方法是用于调用方法的；


注解：
【修饰符列表】 @interface 注解类型名{

}
注解使用是的语法格式：
@注解类型名
注解可以出现在类上、属性上、方法上、变量上等。。。
注解还可以出现在注解类型上

@override这个注解只能注解方法，并且这个注解是给编译器参考的，和运行没有关系
凡是java中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写的
父类方法，那么注解@override会报错（检查重写方法是否重写成功）


元注解：
用来标注”注解类型“的”注解“。被称为元注解
常见的元注解有：
 @ Target      (指定注解出现的范围)
  @Retention    （该注解表示标志的注解最终的保存位置）

@Deprecated 表示这个类已过时

//只允许注解标注类、方法
@Target（{ElementType.TYPE,ElementType.METHOD}）
//希望这注解可以被反射
@ Retention（RetentionPolocy.RUNTIME）






